{"id":"node_modules/voca/words.js","dependencies":[{"name":"/home/pandafulmanda/januaryadvisors/need-hou-list/package.json","includedInParent":true,"mtime":1549467969758},{"name":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/package.json","includedInParent":true,"mtime":1549401503193},{"name":"./helper/reg_exp/const_extended","loc":{"line":8,"column":30},"parent":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/words.js","resolved":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/helper/reg_exp/const_extended.js"},{"name":"./helper/string/coerce_to_string","loc":{"line":10,"column":32},"parent":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/words.js","resolved":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/helper/string/coerce_to_string.js"},{"name":"./helper/object/is_nil","loc":{"line":14,"column":22},"parent":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/words.js","resolved":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/helper/object/is_nil.js"},{"name":"./helper/undefined/nil_default","loc":{"line":18,"column":27},"parent":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/words.js","resolved":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/helper/undefined/nil_default.js"},{"name":"./helper/string/to_string","loc":{"line":22,"column":25},"parent":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/words.js","resolved":"/home/pandafulmanda/januaryadvisors/need-hou-list/node_modules/voca/helper/string/to_string.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = words;\n\nvar _const_extended = require('./helper/reg_exp/const_extended');\n\nvar _coerce_to_string = require('./helper/string/coerce_to_string');\n\nvar _coerce_to_string2 = _interopRequireDefault(_coerce_to_string);\n\nvar _is_nil = require('./helper/object/is_nil');\n\nvar _is_nil2 = _interopRequireDefault(_is_nil);\n\nvar _nil_default = require('./helper/undefined/nil_default');\n\nvar _nil_default2 = _interopRequireDefault(_nil_default);\n\nvar _to_string = require('./helper/string/to_string');\n\nvar _to_string2 = _interopRequireDefault(_to_string);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Splits `subject` into an array of words.\n *\n * @function words\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into words.\n * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {Array} Returns the array of words.\n * @example\n * v.words('gravity can cross dimensions');\n * // => ['gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('GravityCanCrossDimensions');\n * // => ['Gravity', 'Can', 'Cross', 'Dimensions']\n *\n * v.words('Gravity - can cross dimensions!');\n * // => ['Gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('Earth gravity', /[^\\s]+/g);\n * // => ['Earth', 'gravity']\n */\nfunction words(subject, pattern, flags) {\n  var subjectString = (0, _coerce_to_string2.default)(subject);\n  var patternRegExp = void 0;\n  if ((0, _is_nil2.default)(pattern)) {\n    patternRegExp = _const_extended.REGEXP_EXTENDED_ASCII.test(subjectString) ? _const_extended.REGEXP_LATIN_WORD : _const_extended.REGEXP_WORD;\n  } else if (pattern instanceof RegExp) {\n    patternRegExp = pattern;\n  } else {\n    var flagsString = (0, _to_string2.default)((0, _nil_default2.default)(flags, ''));\n    patternRegExp = new RegExp((0, _to_string2.default)(pattern), flagsString);\n  }\n  return (0, _nil_default2.default)(subjectString.match(patternRegExp), []);\n}\nmodule.exports = exports['default'];","map":{"mappings":[{"source":"node_modules/voca/words.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/voca/words.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}}],"sources":{"node_modules/voca/words.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = words;\n\nvar _const_extended = require('./helper/reg_exp/const_extended');\n\nvar _coerce_to_string = require('./helper/string/coerce_to_string');\n\nvar _coerce_to_string2 = _interopRequireDefault(_coerce_to_string);\n\nvar _is_nil = require('./helper/object/is_nil');\n\nvar _is_nil2 = _interopRequireDefault(_is_nil);\n\nvar _nil_default = require('./helper/undefined/nil_default');\n\nvar _nil_default2 = _interopRequireDefault(_nil_default);\n\nvar _to_string = require('./helper/string/to_string');\n\nvar _to_string2 = _interopRequireDefault(_to_string);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Splits `subject` into an array of words.\n *\n * @function words\n * @static\n * @since 1.0.0\n * @memberOf Split\n * @param {string} [subject=''] The string to split into words.\n * @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.\n * @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.\n * @return {Array} Returns the array of words.\n * @example\n * v.words('gravity can cross dimensions');\n * // => ['gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('GravityCanCrossDimensions');\n * // => ['Gravity', 'Can', 'Cross', 'Dimensions']\n *\n * v.words('Gravity - can cross dimensions!');\n * // => ['Gravity', 'can', 'cross', 'dimensions']\n *\n * v.words('Earth gravity', /[^\\s]+/g);\n * // => ['Earth', 'gravity']\n */\nfunction words(subject, pattern, flags) {\n  var subjectString = (0, _coerce_to_string2.default)(subject);\n  var patternRegExp = void 0;\n  if ((0, _is_nil2.default)(pattern)) {\n    patternRegExp = _const_extended.REGEXP_EXTENDED_ASCII.test(subjectString) ? _const_extended.REGEXP_LATIN_WORD : _const_extended.REGEXP_WORD;\n  } else if (pattern instanceof RegExp) {\n    patternRegExp = pattern;\n  } else {\n    var flagsString = (0, _to_string2.default)((0, _nil_default2.default)(flags, ''));\n    patternRegExp = new RegExp((0, _to_string2.default)(pattern), flagsString);\n  }\n  return (0, _nil_default2.default)(subjectString.match(patternRegExp), []);\n}\nmodule.exports = exports['default'];"},"lineCount":65}},"hash":"cfd6e04caff391efc695dffe2e51acbf","cacheData":{"env":{}}}